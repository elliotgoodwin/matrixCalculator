// matrixTranspose.cpp
// A programme that reads in a matrix from a .txt file, computes its transpose, and writes it out to a new .txt file
// Elliot Goodwin

// includes
#include <fstream>
#include <iomanip>
#include <vector>
#include <string>
#include <sstream>

using namespace std;

// main programme starts here
int main() {

	// declare variables
	vector < vector<double> > matrix;
	string x, line;

	// read in data to the matrix
	ifstream thefile("matrix.txt");

	// check the file is open
	if (thefile.is_open()) {

		// and that the end of the file hasn't been reached
		while (!thefile.eof()) {

			// read in each line of data and append it to the string 'line'
			getline(thefile, line);

			// make a temporary vector
			vector <double> temp;
			// use sstream to split the data in the line up, according to ',' separation
			istringstream linestream(line);
			while (getline(linestream, x, ',')) {
				// put the data in to temporary vector
				temp.push_back(atof(x.c_str()));
			}
			// put the data from the temporary vector in to the vector 'matrix'
			matrix.push_back(temp);
		}
		// close the file
		thefile.close();
	} else {
		// write out an error in data not read in
		// cout << "Unable to read file.\n";
		exit(1);
	}

	// write the matrix out to a new file
	// create new .txt file to write out to
	ofstream newfile("transpose.txt");
	// check the write file is open
	if (newfile.is_open()) {
		for (int i = 0; i < matrix[0].size(); i++) {
			for (int j = 0; j < matrix.size(); j++) {
				// write the data in to the new file
				newfile << setw(2) << matrix[i][j] << ((j == matrix.size() - 1) ? "" : ",");
			}
		}
		// close the write file
		newfile.close();
	}
	else {
		// unable to write to file, print out message and exit
		// cout << "Unable to write to file.\n";
		exit(1);
	}

	return 0;
}
